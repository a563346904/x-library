import{_ as s,c as e,o as n,ae as t}from"./chunks/framework.DApdVpHh.js";const g=JSON.parse('{"title":"Commitlint 配置模块","description":"","frontmatter":{},"headers":[],"relativePath":"lint/commitlint.md","filePath":"lint/commitlint.md"}'),i={name:"lint/commitlint.md"};function l(o,a,r,p,d,c){return n(),e("div",null,a[0]||(a[0]=[t(`<h1 id="commitlint-配置模块" tabindex="-1">Commitlint 配置模块 <a class="header-anchor" href="#commitlint-配置模块" aria-label="Permalink to &quot;Commitlint 配置模块&quot;">​</a></h1><p>Commitlint 配置模块提供了一套完整的、可扩展的 Git 提交信息规范配置解决方案，确保团队提交信息的一致性和可读性。</p><h2 id="主要功能" tabindex="-1">主要功能 <a class="header-anchor" href="#主要功能" aria-label="Permalink to &quot;主要功能&quot;">​</a></h2><ul><li>✅ <strong>开箱即用</strong> - 预配置的 Conventional Commits 规范</li><li>🔧 <strong>易于扩展</strong> - 支持自定义和覆盖默认配置</li><li>📝 <strong>标准化提交</strong> - 强制使用结构化的提交信息格式</li><li>📊 <strong>便于生成变更日志</strong> - 标准化提交便于自动生成 CHANGELOG</li><li>🚀 <strong>提高协作效率</strong> - 使提交历史更加清晰易读</li></ul><h2 id="使用方法" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法" aria-label="Permalink to &quot;使用方法&quot;">​</a></h2><h3 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h3><p>在项目根目录创建 <code>commitlint.config.js</code> 文件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { commitlintConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@x-library/lint/commitlint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> commitlintConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="自定义配置" tabindex="-1">自定义配置 <a class="header-anchor" href="#自定义配置" aria-label="Permalink to &quot;自定义配置&quot;">​</a></h3><p>你可以通过传入配置对象来自定义 Commitlint 配置：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { commitlintConfig, RuleConfigSeverity } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@x-library/lint/commitlint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> commitlintConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 添加自定义规则</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rules: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;header-max-length&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [RuleConfigSeverity.Error, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;always&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">120</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改标题最大长度为120字符</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 其他自定义规则...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="配置详解" tabindex="-1">配置详解 <a class="header-anchor" href="#配置详解" aria-label="Permalink to &quot;配置详解&quot;">​</a></h2><p>本模块提供的默认 Commitlint 配置基于 Conventional Commits 规范，包含以下核心组件：</p><h3 id="提交类型" tabindex="-1">提交类型 <a class="header-anchor" href="#提交类型" aria-label="Permalink to &quot;提交类型&quot;">​</a></h3><p>支持的提交类型包括：</p><table tabindex="0"><thead><tr><th>类型</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>feat</code></td><td>新功能</td><td><code>feat: 添加用户登录功能</code></td></tr><tr><td><code>fix</code></td><td>修复 bug</td><td><code>fix: 修复登录验证失败的问题</code></td></tr><tr><td><code>docs</code></td><td>文档改动</td><td><code>docs: 更新 API 文档</code></td></tr><tr><td><code>style</code></td><td>代码格式（不影响功能）</td><td><code>style: 格式化代码风格</code></td></tr><tr><td><code>refactor</code></td><td>代码重构</td><td><code>refactor: 重构用户认证模块</code></td></tr><tr><td><code>perf</code></td><td>性能优化</td><td><code>perf: 优化列表渲染性能</code></td></tr><tr><td><code>test</code></td><td>添加测试</td><td><code>test: 为登录功能添加单元测试</code></td></tr><tr><td><code>build</code></td><td>构建相关</td><td><code>build: 更新打包配置</code></td></tr><tr><td><code>ci</code></td><td>CI 配置</td><td><code>ci: 配置 GitHub Actions</code></td></tr><tr><td><code>chore</code></td><td>杂项（依赖更新等）</td><td><code>chore: 更新依赖版本</code></td></tr><tr><td><code>revert</code></td><td>回滚</td><td><code>revert: 撤销上一次的提交</code></td></tr></tbody></table><h2 id="规则详解" tabindex="-1">规则详解 <a class="header-anchor" href="#规则详解" aria-label="Permalink to &quot;规则详解&quot;">​</a></h2><p>本节列举了 <code>@x-library/lint</code> 包中的所有 Commitlint 规则。</p><h3 id="提交格式规范" tabindex="-1">提交格式规范 <a class="header-anchor" href="#提交格式规范" aria-label="Permalink to &quot;提交格式规范&quot;">​</a></h3><p>标准的提交信息格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;类型&gt;[可选的作用域]: &lt;描述&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[可选的正文]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[可选的页脚]</span></span></code></pre></div><p>示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>feat(auth): 添加用户登录功能</span></span>
<span class="line"><span></span></span>
<span class="line"><span>实现了完整的用户认证流程，包括以下功能：</span></span>
<span class="line"><span>- 用户名和密码验证</span></span>
<span class="line"><span>- JWT token 生成和验证</span></span>
<span class="line"><span>- 登录状态持久化</span></span>
<span class="line"><span>- 自动登出机制</span></span>
<span class="line"><span></span></span>
<span class="line"><span>这个功能支持多种登录方式，提高了用户体验。</span></span>
<span class="line"><span>同时加强了安全性，防止了常见的认证攻击。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Closes #123</span></span>
<span class="line"><span>Co-authored-by: Developer &lt;dev@example.com&gt;</span></span></code></pre></div><h3 id="标题相关规则" tabindex="-1">标题相关规则 <a class="header-anchor" href="#标题相关规则" aria-label="Permalink to &quot;标题相关规则&quot;">​</a></h3><h4 id="header-max-length" tabindex="-1"><code>header-max-length</code> <a class="header-anchor" href="#header-max-length" aria-label="Permalink to &quot;\`header-max-length\`&quot;">​</a></h4><ul><li><strong>值</strong>: <code>[RuleConfigSeverity.Error, &#39;always&#39;, 100]</code></li><li><strong>说明</strong>: 标题行（包含类型、作用域和描述）的最大长度不能超过100个字符</li><li><strong>正例</strong>: <code>feat: 添加用户登录功能</code></li><li><strong>反例</strong>: <code>feat: 添加一个非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常非常长的用户登录功能描述</code></li></ul><h3 id="类型相关规则" tabindex="-1">类型相关规则 <a class="header-anchor" href="#类型相关规则" aria-label="Permalink to &quot;类型相关规则&quot;">​</a></h3><h4 id="type-case" tabindex="-1"><code>type-case</code> <a class="header-anchor" href="#type-case" aria-label="Permalink to &quot;\`type-case\`&quot;">​</a></h4><ul><li><strong>值</strong>: <code>[RuleConfigSeverity.Error, &#39;always&#39;, &#39;lower-case&#39;]</code></li><li><strong>说明</strong>: 提交类型必须使用小写</li><li><strong>正例</strong>: <code>feat: 添加功能</code></li><li><strong>反例</strong>: <code>FEAT: 添加功能</code></li></ul><h4 id="type-empty" tabindex="-1"><code>type-empty</code> <a class="header-anchor" href="#type-empty" aria-label="Permalink to &quot;\`type-empty\`&quot;">​</a></h4><ul><li><strong>值</strong>: <code>[RuleConfigSeverity.Error, &#39;never&#39;]</code></li><li><strong>说明</strong>: 提交类型不能为空</li><li><strong>正例</strong>: <code>feat: 添加功能</code></li><li><strong>反例</strong>: <code>: 添加功能</code></li></ul><h4 id="type-enum" tabindex="-1"><code>type-enum</code> <a class="header-anchor" href="#type-enum" aria-label="Permalink to &quot;\`type-enum\`&quot;">​</a></h4><ul><li><strong>值</strong>: <code>[RuleConfigSeverity.Error, &#39;always&#39;, [...]]</code></li><li><strong>说明</strong>: 提交类型必须是预定义的类型之一</li><li><strong>正例</strong>: <code>feat: 添加功能</code>、<code>fix: 修复问题</code></li><li><strong>反例</strong>: <code>feature: 添加功能</code>、<code>update: 更新代码</code></li></ul><h3 id="主题相关规则" tabindex="-1">主题相关规则 <a class="header-anchor" href="#主题相关规则" aria-label="Permalink to &quot;主题相关规则&quot;">​</a></h3><h4 id="subject-case" tabindex="-1"><code>subject-case</code> <a class="header-anchor" href="#subject-case" aria-label="Permalink to &quot;\`subject-case\`&quot;">​</a></h4><ul><li><strong>值</strong>: <code>[RuleConfigSeverity.Error, &#39;never&#39;, [&#39;sentence-case&#39;, &#39;start-case&#39;, &#39;pascal-case&#39;, &#39;upper-case&#39;]]</code></li><li><strong>说明</strong>: 主题不能使用句子格式、每词首字母大写、帕斯卡命名、全大写</li><li><strong>正例</strong>: <code>feat: 添加用户登录功能</code></li><li><strong>反例</strong>: <code>feat: 添加用户登录功能。</code>、<code>feat: 添加 User Login 功能</code></li></ul><h4 id="subject-empty" tabindex="-1"><code>subject-empty</code> <a class="header-anchor" href="#subject-empty" aria-label="Permalink to &quot;\`subject-empty\`&quot;">​</a></h4><ul><li><strong>值</strong>: <code>[RuleConfigSeverity.Error, &#39;never&#39;]</code></li><li><strong>说明</strong>: 主题不能为空</li><li><strong>正例</strong>: <code>feat: 添加用户登录功能</code></li><li><strong>反例</strong>: <code>feat: </code></li></ul><h4 id="subject-full-stop" tabindex="-1"><code>subject-full-stop</code> <a class="header-anchor" href="#subject-full-stop" aria-label="Permalink to &quot;\`subject-full-stop\`&quot;">​</a></h4><ul><li><strong>值</strong>: <code>[RuleConfigSeverity.Error, &#39;never&#39;, &#39;.&#39;]</code></li><li><strong>说明</strong>: 主题结尾不能有句号</li><li><strong>正例</strong>: <code>feat: 添加用户登录功能</code></li><li><strong>反例</strong>: <code>feat: 添加用户登录功能。</code></li></ul><h4 id="subject-max-length" tabindex="-1"><code>subject-max-length</code> <a class="header-anchor" href="#subject-max-length" aria-label="Permalink to &quot;\`subject-max-length\`&quot;">​</a></h4><ul><li><strong>值</strong>: <code>[RuleConfigSeverity.Error, &#39;always&#39;, 72]</code></li><li><strong>说明</strong>: 主题最大长度不能超过72个字符</li><li><strong>正例</strong>: 简短明了的主题</li><li><strong>反例</strong>: 超过72个字符的主题</li></ul><h3 id="正文相关规则" tabindex="-1">正文相关规则 <a class="header-anchor" href="#正文相关规则" aria-label="Permalink to &quot;正文相关规则&quot;">​</a></h3><h4 id="body-leading-blank" tabindex="-1"><code>body-leading-blank</code> <a class="header-anchor" href="#body-leading-blank" aria-label="Permalink to &quot;\`body-leading-blank\`&quot;">​</a></h4><ul><li><p><strong>值</strong>: <code>[RuleConfigSeverity.Warning, &#39;always&#39;]</code></p></li><li><p><strong>说明</strong>: 正文前必须有空行</p></li><li><p><strong>正例</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>feat: 添加用户登录功能</span></span>
<span class="line"><span></span></span>
<span class="line"><span>实现了完整的用户认证流程</span></span></code></pre></div></li><li><p><strong>反例</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>feat: 添加用户登录功能</span></span>
<span class="line"><span>实现了完整的用户认证流程</span></span></code></pre></div></li></ul><h4 id="body-max-line-length" tabindex="-1"><code>body-max-line-length</code> <a class="header-anchor" href="#body-max-line-length" aria-label="Permalink to &quot;\`body-max-line-length\`&quot;">​</a></h4><ul><li><strong>值</strong>: <code>[RuleConfigSeverity.Error, &#39;always&#39;, 100]</code></li><li><strong>说明</strong>: 正文每行最大长度不能超过100个字符</li><li><strong>正例</strong>: 每行不超过100个字符的正文</li><li><strong>反例</strong>: 包含超过100个字符的行</li></ul><h3 id="页脚相关规则" tabindex="-1">页脚相关规则 <a class="header-anchor" href="#页脚相关规则" aria-label="Permalink to &quot;页脚相关规则&quot;">​</a></h3><h4 id="footer-leading-blank" tabindex="-1"><code>footer-leading-blank</code> <a class="header-anchor" href="#footer-leading-blank" aria-label="Permalink to &quot;\`footer-leading-blank\`&quot;">​</a></h4><ul><li><p><strong>值</strong>: <code>[RuleConfigSeverity.Warning, &#39;always&#39;]</code></p></li><li><p><strong>说明</strong>: 页脚前必须有空行</p></li><li><p><strong>正例</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>feat: 添加用户登录功能</span></span>
<span class="line"><span></span></span>
<span class="line"><span>实现了完整的用户认证流程</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Closes #123</span></span></code></pre></div></li><li><p><strong>反例</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>feat: 添加用户登录功能</span></span>
<span class="line"><span></span></span>
<span class="line"><span>实现了完整的用户认证流程</span></span>
<span class="line"><span>Closes #123</span></span></code></pre></div></li></ul><h4 id="footer-max-line-length" tabindex="-1"><code>footer-max-line-length</code> <a class="header-anchor" href="#footer-max-line-length" aria-label="Permalink to &quot;\`footer-max-line-length\`&quot;">​</a></h4><ul><li><strong>值</strong>: <code>[RuleConfigSeverity.Error, &#39;always&#39;, 100]</code></li><li><strong>说明</strong>: 页脚每行最大长度不能超过100个字符</li><li><strong>正例</strong>: 每行不超过100个字符的页脚</li><li><strong>反例</strong>: 包含超过100个字符的行</li></ul><h2 id="结合工具使用" tabindex="-1">结合工具使用 <a class="header-anchor" href="#结合工具使用" aria-label="Permalink to &quot;结合工具使用&quot;">​</a></h2><p>为了获得最佳效果，建议将 Commitlint 与以下工具结合使用：</p><ol><li><strong>Husky</strong>: 设置 Git hooks，在提交前自动验证提交信息</li><li><strong>Commitizen</strong>: 提供交互式命令行界面，引导开发者创建符合规范的提交信息</li></ol><h2 id="完整示例" tabindex="-1">完整示例 <a class="header-anchor" href="#完整示例" aria-label="Permalink to &quot;完整示例&quot;">​</a></h2><p>下面是一个符合规范的完整提交信息示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>feat(user): 实现用户认证功能</span></span>
<span class="line"><span></span></span>
<span class="line"><span>开发了一套完整的用户认证系统，包括以下功能：</span></span>
<span class="line"><span>- 用户注册与邮箱验证</span></span>
<span class="line"><span>- 登录与密码重置</span></span>
<span class="line"><span>- OAuth2.0 第三方登录（微信、GitHub）</span></span>
<span class="line"><span>- 双因素认证（2FA）支持</span></span>
<span class="line"><span>- 会话管理与自动登出</span></span>
<span class="line"><span></span></span>
<span class="line"><span>该功能极大提升了系统安全性，同时通过优化登录流程</span></span>
<span class="line"><span>改善了用户体验。登录速度提升约 30%。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>BREAKING CHANGE: 用户认证接口已完全重构，</span></span>
<span class="line"><span>旧版本客户端需要更新适配新的认证流程。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Closes #142, #157, #218</span></span>
<span class="line"><span>Related to #95</span></span>
<span class="line"><span>Co-authored-by: 张三 &lt;zhangsan@example.com&gt;</span></span>
<span class="line"><span>Reviewed-by: 李四 &lt;lisi@example.com&gt;</span></span></code></pre></div><h3 id="提交信息结构解析" tabindex="-1">提交信息结构解析 <a class="header-anchor" href="#提交信息结构解析" aria-label="Permalink to &quot;提交信息结构解析&quot;">​</a></h3><ol><li><p><strong>标题行</strong>：</p><ul><li>类型: <code>feat</code> - 表示这是一个新功能</li><li>作用域: <code>user</code> - 表示这个变更影响用户模块</li><li>描述: 简洁明了地说明了做了什么</li></ul></li><li><p><strong>正文</strong>：</p><ul><li>空一行后开始</li><li>详细描述了实现的具体功能点</li><li>解释了这个变更的价值和影响</li></ul></li><li><p><strong>破坏性变更说明</strong>：</p><ul><li>使用 <code>BREAKING CHANGE:</code> 前缀标记</li><li>清晰说明了不兼容变更的详情和迁移建议</li></ul></li><li><p><strong>页脚</strong>：</p><ul><li>引用相关的 Issue: <code>Closes #142, #157, #218</code></li><li>关联的 Issue: <code>Related to #95</code></li><li>协作者信息: <code>Co-authored-by: 张三 &lt;zhangsan@example.com&gt;</code></li><li>审阅者信息: <code>Reviewed-by: 李四 &lt;lisi@example.com&gt;</code></li></ul></li></ol><p>这个示例展示了一个功能完善、信息丰富的提交信息，遵循了所有 Commitlint 规则，同时提供了足够的上下文让其他开发者理解这次变更的目的、影响和价值。</p><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><p>使用本配置时，请确保项目中已安装 Commitlint 相关依赖。对于新接触 Conventional Commits 规范的团队成员，建议先熟悉规范内容，并使用 Commitizen 等工具辅助创建提交信息。</p>`,63)]))}const u=s(i,[["render",l]]);export{g as __pageData,u as default};
